# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

variables:
  BuildConfiguration: Release

jobs:
- job: Docker
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: Docker@1
    displayName: Build docker image
    inputs:
      command: build
      dockerFile: Dockerfile
      imageName: loicsharma/baget:$(Build.SourceVersion)

  - task: Docker@1
    displayName: Tag latest docker image
    condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
    inputs:
      command: tag
      imageName: loicsharma/baget:$(Build.SourceVersion)
      arguments: loicsharma/baget:latest

  - task: Docker@1
    displayName: Push docker image
    condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
    inputs:
      command: push
      containerRegistryType: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Hub'
      imageName: loicsharma/baget

- job: Artifacts
  pool:
    vmImage: vs2017-win2016
  steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 3.1.X'
      inputs:
        version: 3.1.x

    - task: Npm@1
      displayName: Install frontend dependencies
      inputs:
          command: install
          workingDir: src/BaGet.UI

    - task: Npm@1
      displayName: Build frontend
      inputs:
          command: custom
          workingDir: src/BaGet.UI
          customCommand: run build

    - script: dotnet build --configuration $(BuildConfiguration)
      displayName: Build backend

    - task: DotNetCoreCLI@2
      displayName: Test backend
      inputs:
          command: test
          projects: '**/*Tests/*.csproj'
          arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'

    - task: DotNetCoreCLI@2
      inputs:
          command: custom
          custom: tool
          arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool

    - script: reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"HtmlInline_AzurePipelines;Cobertura;Badges"
      displayName: Create reports

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml

    - script: dotnet pack --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)
      displayName: Pack

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
